{"version":3,"names":["base64ToArrayBuffer","base64","binary_string","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","uint8ToBase64","u8Arr","CHUNK_SIZE","index","result","slice","subarray","Math","min","String","fromCharCode","apply","btoa"],"sources":["pictureActions.js"],"sourcesContent":["export function base64ToArrayBuffer(base64) {\n  const binary_string = atob(base64);\n  const len = binary_string.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n\nexport function uint8ToBase64(u8Arr) {\n  const CHUNK_SIZE = 0x8000; //arbitrary number\n  let index = 0;\n  const length = u8Arr.length;\n  let result = '';\n  let slice;\n  while (index < length) {\n    slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n    result += String.fromCharCode.apply(null, slice);\n    index += CHUNK_SIZE;\n  }\n  return btoa(result);\n}\n"],"mappings":";;;;;;;;AAAO,SAASA,mBAAT,CAA6BC,MAA7B,EAAqC;EAC1C,MAAMC,aAAa,GAAGC,IAAI,CAACF,MAAD,CAA1B;EACA,MAAMG,GAAG,GAAGF,aAAa,CAACG,MAA1B;EACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,GAAf,CAAd;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;IAC5BF,KAAK,CAACE,CAAD,CAAL,GAAWN,aAAa,CAACO,UAAd,CAAyBD,CAAzB,CAAX;EACD;;EACD,OAAOF,KAAK,CAACI,MAAb;AACD;;AAEM,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EACnC,MAAMC,UAAU,GAAG,MAAnB,CADmC,CACR;;EAC3B,IAAIC,KAAK,GAAG,CAAZ;EACA,MAAMT,MAAM,GAAGO,KAAK,CAACP,MAArB;EACA,IAAIU,MAAM,GAAG,EAAb;EACA,IAAIC,KAAJ;;EACA,OAAOF,KAAK,GAAGT,MAAf,EAAuB;IACrBW,KAAK,GAAGJ,KAAK,CAACK,QAAN,CAAeH,KAAf,EAAsBI,IAAI,CAACC,GAAL,CAASL,KAAK,GAAGD,UAAjB,EAA6BR,MAA7B,CAAtB,CAAR;IACAU,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCN,KAAhC,CAAV;IACAF,KAAK,IAAID,UAAT;EACD;;EACD,OAAOU,IAAI,CAACR,MAAD,CAAX;AACD"}